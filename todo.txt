sample usage:
jsonr -i "something: value1" -h "Authorization: Bearer XXX" -r 200 -t "Success" -c "./config" -e "test" -m POST -v sample.http|https://www.google.com

-i Provide value for [i]nput variables

ERROR: No value for @@something@@ provided! Use the -v "something: {value}" parameter.

-h Provide value for additional [h]eaders

--expected-status Expected response [s]tatus code

--expected-text Expected text that should be contained within response body

-t [t]est scenarios file - you can use test scenarios files for smoke tests, where multiple
requests will be run against given assertions. Such file needs to have each line corresponding to single
jsonr execution. Jsonr will run each of them and prepare some statistics. Also, non-zero exit code
will be provided if any of the requests will fail. Sample file content:

```
jsonr -i "something: value1" -m GET www.google.com
```

-p request [p]rocessor file - if you want to decorate request with anything (like Authorization headers), you can write simple
javascript file that exports default function that takes as an input request object and as an output response object.

Sample file content:

```
export default (request, configuration) => {
  console.log("This is request that I' about to modify in some way");
  return request;
}
```

`request` parameter contains following: 
```
{
  method: "",
  url: "",
  headers: {
    "headerType1": "headerValue1"
  }
}
```

`configuration` object contains standard key-value object read by -c option.

-c Configuration folder with json files (key:value objects) for holding variables values (it will be persisted, no need to repeat this param in future).
By default jsonr will search for ./config folder, if found it will assume

-e environment - name of the file from -c configuration folder (no .json extension required)

-m HTTP method

-v Verbose mode - more details in output (full request with headers) + response headers

-d Debug mode - provide all logs from jsonr (use it only if you have issues with application, you can send such logs to help troubleshooting)

-b request body (if not  willing to use http file)

--no-auto-json-header by default jsonr will append Content-Type "application/json" header to all requests
 (if such header won't be present in definition) so you don't need to repeat it. Use this option to disable
this behaviour

--help display this help message

-o [o]utput file for response details (status code, total execution time, body, headers), if omitted outputs to stdout. 
Caution: If file exists it will overwrite it. If no extension provided, it will automatically append .json

EXAMPLE: jsonr ... -o my-response => saves to ./my-response.json, overwrites file if it already exists!

param:
  fileName in current working directory, or absolute path or uri of the resource


.jsonr file

You can create your own .jsonr file in HOME directory. Jsonr will also start looking for this file in the
current working directory you're in. If found, it won't look further for HOME .jsonr file. If found it will
append all parameters provided there. The idea of the file is - provide options in each line.

EXAMPLE:

```
-c ./path/to/configuration/file/in/single/line
-p ./path/to/processor/file/for/each/request
```

TODO: jsonr and configuration files - shouldn't be the same?
